# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OJxRn0bWa0baMWsSxFLRMkwafwKB4TN5
"""

import requests
import pandas as pd
import numpy as np
import time
from datetime import datetime

# === Telegramè¨­å®š ===
TELEGRAM_TOKEN = '7760900409:AAGazBwPgNnYR94RaEP1N8DEkudxtIO3bt8'
TELEGRAM_CHAT_ID = '7847694592'

def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"[Telegram Error] {e}")

# === ç‚ºæ›¿è¨­å®š ===
API_KEY = '574b870eec85d698cb4fb055'
BASE_URL = f'https://v6.exchangerate-api.com/v6/{API_KEY}/pair/USD/JPY'

candles = []
balance = 50000
trade_amount_multiplier = 22.5
position = None
entry_price = None

def calculate_bollinger_bands(df, period=21):
    sma = df['Close'].rolling(window=period).mean()
    std = df['Close'].rolling(window=period).std()
    return {
        '0Ïƒ': sma,
        '+1Ïƒ': sma + std,
        '-1Ïƒ': sma - std,
        '+2Ïƒ': sma + 2*std,
        '-2Ïƒ': sma - 2*std,
        '+3Ïƒ': sma + 3*std,
        '-3Ïƒ': sma - 3*std
    }

def fetch_price():
    try:
        response = requests.get(BASE_URL)
        return response.json()['conversion_rate']
    except:
        return None

def check_band_expansion(df, lookback=5):
    bands = calculate_bollinger_bands(df)
    widths = bands['+2Ïƒ'] - bands['-2Ïƒ']
    for i in range(-2, -lookback-2, -1):
        if widths.iloc[i-1] == 0:
            continue
        expansion_ratio = widths.iloc[i] / widths.iloc[i-1]
        if expansion_ratio >= 1.25:
            continue_expand = all(widths.iloc[j] > widths.iloc[j-1] for j in range(i, 0))
            if continue_expand:
                return True
    return False

def should_enter_trade(df, price):
    if len(df) < 21 or not check_band_expansion(df):
        return None
    bands = calculate_bollinger_bands(df)
    bb_m2 = bands['-2Ïƒ'].iloc[-1]
    bb_m3 = bands['-3Ïƒ'].iloc[-1]
    bb_p2 = bands['+2Ïƒ'].iloc[-1]
    bb_p3 = bands['+3Ïƒ'].iloc[-1]
    if bb_m3 < price < bb_m2:
        if ((bb_m2 - bb_m3) / 0.25) > (price - bb_m3):
            return 'buy'
    if bb_p2 < price < bb_p3:
        if ((bb_p3 - bb_p2) / 0.75) < (price - bb_p2):
            return 'sell'
    return None

# === ãƒ¡ã‚¤ãƒ³ãƒ«ãƒ¼ãƒ— ===
while True:
    price = fetch_price()
    now = datetime.now()
    if price is None:
        print(f"[{now}] Price fetch failed.")
        time.sleep(60)
        continue

    print(f"[{now}] Current price: {price}")
    candles.append({'time': now, 'Close': price})
    if len(candles) > 200:
        candles.pop(0)

    df = pd.DataFrame(candles)

    if position is None:
        signal = should_enter_trade(df, price)
        if signal:
            position = signal
            entry_price = price
            trade_amount = balance * trade_amount_multiplier
            msg = f"ðŸ”” ENTRY SIGNAL: {position.upper()} at {entry_price:.3f}"
            print(msg)
            send_telegram_message(msg)
    else:
        bands = calculate_bollinger_bands(df)
        bb_0 = bands['0Ïƒ'].iloc[-1]
        stop_loss_buy = entry_price - 0.08
        stop_loss_sell = entry_price + 0.08

        if position == 'buy':
            if price >= bb_0 or price <= stop_loss_buy:
                profit = (price - entry_price) * trade_amount
                balance += profit
                msg = f"âœ… EXIT BUY at {price:.3f}, Profit: {profit:.2f}, Balance: {balance:.2f}"
                print(msg)
                send_telegram_message(msg)
                position = None
                entry_price = None
        elif position == 'sell':
            if price <= bb_0 or price >= stop_loss_sell:
                profit = (entry_price - price) * trade_amount
                balance += profit
                msg = f"âœ… EXIT SELL at {price:.3f}, Profit: {profit:.2f}, Balance: {balance:.2f}"
                print(msg)
                send_telegram_message(msg)
                position = None
                entry_price = None

    time.sleep(60)